{{include reference="IdentityOAuth.IdentityOAuthConfigMacros" /}}

{{velocity output="false"}}
#macro (getLinkTranslations $registrationHint $documentationHint $outlookHint)
  ## Register for OAuth access on the Microsoft Azure portal.
  #getTranslation('communicate.hint.linkLabel', 'xml', $translation)
  #set ($portalLink = 'https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps')
  #set ($registrationLink = "<a href='${portalLink}'>${translation}</a>")
  #tp('communicate.hint',  ['__LINK__'], 'xml', $translation)
  #set ($registrationHint = $translation.replace('__LINK__', "${registrationLink}"))
  ## Installation instruction.
  #getTranslation('communicate.hint2.linkLabel', 'xml', $translation)
  #set ($documentationLink = "<a href='${productPage}#documentation'>${translation}</a>")
  #tp('communicate.hint2',  ['__LINK__'], 'xml', $translation)
  #set ($documentationHint = $translation.replace('__LINK__', "${documentationLink}"))
  ## Use outlook for avatars.
  #getTranslation('scope_avatar.onlyOutlook.linkLabel', 'xml', $translation)
  #set ($outlookLink =
    "<a href='https://docs.microsoft.com/en-us/graph/known-issues#photo-restrictions'>${translation}</a>")
  #tp('scope_avatar.onlyOutlook',  ['__LINK__'], 'xml', $translation)
  #set ($outlookHint = $translation.replace('__LINK__', "${outlookLink}"))
#end
{{/velocity}}

{{velocity}}
#if(!$xwiki.hasAdminRights())
  Admin rights are needed.
#else
  ## defines formId, propNamePrefixIO, configDoc, objIO, objO
  ## #set($configDocName="AzureAD.AzureADConfig")
  ## set($providerHint = "AzureAD")
  ## #set($productPage = "https://store.xwiki.com/xwiki/bin/view/Extension/AzureADIntegration")
  #initConfigObjects(${configDocName}, ${extraObjectClassPropPrefixes}, ${translationPrefix})
  ## use stylesheet and JavaScript extensions
  #ioIncludeUIX()
  #getLinkTranslations($registrationHint $documentationHint $outlookHint)
  {{html clean="false" wiki=false}}
  <script>window.identityOAuthProvider = "${providerHint}";</script>
  <p>#t('config.explanation')</p>

  <form id="$formId" method="post" action="$xwiki.getURL($configDoc, 'saveandcontinue')" class="xform">
      <dl>
          <dt>#displayInput ("active", $objIO) <label for="${propNamePrefixIO}_active">#t ("active")</label></dt>
          <dd></dd>
      </dl>

      <fieldset>
          <legend>#t ('communicate')</legend>

          <dl>
              <dt><span class="xHint">
                $registrationHint<br>
                $documentationHint</span>
              </dt>
              <dd></dd>
              <dt><label for="${propNamePrefixIO}_clientid">#t ('clientid')</label>
                  <span class="xHint">#t ("clientid.hint")</span></dt>
              <dd> #displayInput ('clientid', $objIO)</dd>

              <dt><label for="${propNamePrefixIO}_secret">#t ('secret')</label>
                  <span class="xHint">#t("secret.hint")</span></dt>
              <dd> #displayInput ("secret", $objIO)</dd>

              #foreach($x in $extraObjectClassPropPrefixes)
                  <dt><label for="${x[2]}_0_${x[1]}">#t ($x[1])</label>
                      <span class="xHint">#t ("${x[1]}.hint")</span></dt>
                  <dd> #displayInput ("${x[1]}", $x[0])</dd>
              #end

              <dt><label for="${propNamePrefixIO}_redirectUrl">#t ('redirectUrl')</label>
                  <span class="xHint">#t ("redirectUrl.hint")</span>
              </dt>
            #*
            Four cases:
            - redirectUrl browsers' matches servers'
              - 1) value as expected
            - redirectUrl browsers' unequal servers'
              - 2) value as browser's
              - 3) value as server's
            - 4) independent
             *#
              #calcReturnUrlsJS()
              <dd> #renderRedirectUrlInputAndHints()
              </dd>

            ## checkboxes for scope, needs JS
              <dt><label>#t ('scope')</label>
                  <span class="xHint">#t ('scope.hint')</span></dt>
              <dd>
                  <label title="#t ('checkbox_mandatory')">
                      <input type="checkbox" name="scope_openid " disabled="true" checked class="mandatory">#t ('scope_identity')</label>
                  <label title="#t ('checkbox_mandatory')">
                      <input type="checkbox" name="scope_User.Read" disabled="true" checked class="mandatory">#t ("scope_email")</label><br/>
                  <label title="#t('checkbox_notyetdone')">
                      <input type="checkbox" name="scope_User.ReadBasic.All">#t ('scope_avatar')</label>
                  #set($p=$configDocName.length()+1)
                  <input type="hidden" name="${propNamePrefixIO.substring($p)}_scope" value="${objIO.getValue('scope')}"/>
                  ($outlookHint)
              </dd>
          </dl>
      </fieldset>

    ## <fieldset>
    ##    <legend>#t ('loginbehaviour')</legend>

    ##    <dl>
    ## TODO: add domains' limitation

    ## TODO: add cookie's support
    ##    </dl>
    ## </fieldset>


    ## Hidden form elements
    #set ($params = "editor=${escapetool.url(${editor})}&amp;section=${escapetool.url(${section})}")
    #set ($params = "${params}&amp;space=${escapetool.url(${currentSpace})}")
    #set ($continueURL = $xwiki.getURL($currentDoc, 'admin', $params))
      <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}"/>
      <input type="hidden" name="xcontinue" value="${continueURL}"/>
      <input type="hidden" name="xredirect" value="${continueURL}"/>

    ## submit
    <div class="bottombuttons">
      <p><span id="warningIncomplete">#t("warningIncomplete")</span>&nbsp;</p>
      <p class="admin-buttons">
        <span class="buttonwrapper">
          <input class="button" type="submit" name="formactionsac"
            value="$escapetool.xml($services.localization.render('admin.save'))"/>
        </span>
      </p>
    </div>
  </form>
  <div id="appOnNowWhat">
      <p>#t ('nowWhat1')</p>
      <p>#t ('nowWhat2')</p>
  </div>
#end
{{/html}}
{{/velocity}}